
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        
        rows = len(grid)
        cols = len(grid[0])
        rotten = []

        fresh = 0
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == 2:
                    rotten.append([i,j]) # rotten
                elif grid[i][j] == 1:
                    fresh += 1 # total fresh - will reduce it one by one

        count = 0
        while rotten:
            # pop every item -- then start again
            n = len(rotten)
            for i in range(n):
                # process till here - in one minute
                r = rotten[0][0]
                c = rotten[0][1]
                rotten.pop(0)

                # r, c -- already rotten
                if r > 0 and grid[r-1][c] == 1:
                    # rotten - up
                    grid[r-1][c] = 2 # rotten
                    fresh -= 1
                    rotten.append([r-1,c]) # add this to the list
                if c > 0 and grid[r][c-1] == 1:
                    # rotten - left
                    grid[r][c-1] = 2
                    fresh -= 1
                    rotten.append([r,c-1])
                if r < rows-1 and grid[r+1][c] == 1:
                    # rotten - bottom
                    grid[r+1][c] = 2
                    fresh -=1
                    rotten.append([r+1,c])
                if c < cols-1 and grid[r][c+1] == 1:
                    # rotten - right
                    grid[r][c+1] = 2
                    fresh -= 1
                    rotten.append([r,c+1])

            if len(rotten) > 0:
                count += 1

        if fresh == 0:
            return count

        return -1
        
      
