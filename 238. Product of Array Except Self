class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
        # approach 2 - space approach - no extra array except output one
        
        output = [0] * len(nums)
        
        output[0] = 1
        for n in range(1, len(nums)):
            output[n] = nums[n-1] * output[n-1]
        
        
        right = 1 # maintain a variable for right side calculation
        for n in range(len(nums)-1, -1, -1):
            output[n] *= right
            right *= nums[n]
            
        print(output)
        return output
        
        
        
        """
        # approach 1 - left and right product lists
        left = [0] * len(nums)
        right = [0] * len(nums)
        ans = []
        
        left[0] = 1
        right[len(nums)-1] = 1
        
        for n in range(1, len(nums)):
            left[n] = nums[n-1] * left[n-1]
        
        for n in range(len(nums)-2, -1, -1):
            right[n] = nums[n+1] * right[n+1]
            
        for n in range(len(nums)):
            ans.append(left[n] * right[n])
            
        print(ans)
        return ans"""
        
        
        
        
        """
        TIME LIMIT EXCEEDED - brute force
        output = []
        i = 0
        while i < len(nums):
            temp = nums[:i] + nums[i+1:]
            output.insert(i, math.prod(temp))
            
            i+=1
            
        print(output)
        return output"""
