class Solution:
    def imageSmoother(self, M: List[List[int]]) -> List[List[int]]:
        
        rows = len(M)
        cols = len(M[0])
        
        print("rows: ", rows) 
        print("cols: ", cols)
        print("M: ", M)
        
        answer = []
        
        for r in range(rows):
            row_ = []
            for c in range(cols):
                row_.append(0)
            answer.append(row_)
        
        print("answer with zeroes: ", answer)
        
        
        i = 0
        # j = 0
        while i < rows:
            j = 0
            while j < cols:
                if rows == 0 and cols == 0: return None
                if rows == 1 and cols == 1: return M
                
                if rows == 1 and cols > 1: # i = 0
                    if j == 0:
                        answer[0][j] = floor((M[0][j] + M[0][j+1])/2)
                    if j > 0 and j < cols -1:
                        answer[0][j] = floor((M[0][j] + M[0][j-1] + M[0][j+1])/3)
                    if j == cols-1:
                        answer[0][j] = floor((M[0][j] + M[0][j-1])/2)
                        
                elif rows > 1 and cols == 1: # j = 0
                    if i == 0:
                        answer[i][0] = floor((M[i][0] + M[i+1][0])/2)
                    if i > 0 and i < rows-1:
                        answer[i][0] = floor((M[i][0] + M[i-1][0] + M[i+1][0])/3)
                    if i == rows-1:
                        answer[i][0] = floor((M[i][0] + M[i-1][0])/2)
                
                elif rows > 1 and cols > 1: # i ---- j ----
                    if i == 0 and j == 0:
                        answer[i][j] = floor((M[i][j] + M[i][j+1] + M[i+1][j] + M[i+1][j+1])/4)
                    if i == rows-1 and j == cols-1:
                        answer[i][j] = floor((M[i][j] + M[i][j-1] + M[i-1][j-1] + M[i-1][j])/4)
                    if i == 0 and j == cols-1:
                        answer[i][j] = floor((M[i][j] + M[i][j-1] + M[i+1][j] + M[i+1][j-1])/4)
                    if i == rows-1 and j == 0:
                        answer[i][j] = floor((M[i][j] + M[i][j+1] + M[i-1][j] + M[i-1][j+1])/4)
                    if i == 0 and j>0 and j<cols-1:
                        answer[i][j] = floor((M[i][j] + M[i][j-1] + M[i][j+1] + M[i+1][j-1] + M[i+1][j] + M[i+1][j+1])/6)
                    if j == 0 and i>0 and i<rows-1:
                        answer[i][j] = floor((M[i][j] + M[i-1][j] + M[i-1][j+1] + M[i][j+1] + M[i+1][j] + M[i+1][j+1])/6)
                    if i == rows-1 and j>0 and j<cols-1:
                        answer[i][j] = floor((M[i][j] + M[i][j-1] + M[i][j+1] + M[i-1][j-1] + M[i-1][j] + M[i-1][j+1])/6)
                    if j == cols-1 and i>0 and i<rows-1:
                        answer[i][j] = floor((M[i][j] + M[i-1][j-1] + M[i-1][j] + M[i][j-1] + M[i+1][j-1] + M[i+1][j])/6)
                    if i>0 and i<rows-1 and j>0 and j<cols-1:
                        answer[i][j] = floor((M[i][j] + M[i-1][j-1] + M[i-1][j] + M[i-1][j+1] + M[i][j-1] + M[i][j+1] + M[i+1][j-1] + M[i+1][j] + M[i+1][j+1])/9)
                
                j+=1
            i+=1
            
            
                
        print("answer: ", answer)
        return answer
