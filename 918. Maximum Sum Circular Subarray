
class Solution:
    def maxSubarraySumCircular(self, A: List[int]) -> int:
        
        # normal kadane
        new1 = []
        for a in A:
            new1.append(a)
            
        # print("new1: ", new1)

        # normal
        cur_sum1 = new1[0]
        max_sum1 = cur_sum1
        for i in range(1, len(new1)):
            cur_sum1 = max(cur_sum1 + new1[i], new1[i])
            max_sum1 = max(max_sum1, cur_sum1)
        
        # print("max_sum1: ", max_sum1)
        kadane = max_sum1
        
        # inverted kadane
        new2 = []
        for a in A:
            aa = -1 * a
            new2.append(aa)
            
        # print("new2: ", new2)
        
        # inverted - circular sum [new_kadane = total_sum + cur_kadane]
        cur_sum2 = new2[0]
        max_sum2 = cur_sum2
        for i in range(1, len(new2)):
            cur_sum2 = max(cur_sum2 + new2[i], new2[i])
            max_sum2 = max(max_sum2, cur_sum2)
        
        # print("max_sum2: ", max_sum2)
        new_kadane = max_sum2 + sum(A)
        
        
        # print("kadane: ", kadane)
        # print("new_kadane: ", new_kadane)
        
        if new_kadane > kadane and new_kadane != 0:
            return new_kadane
        else:
            return kadane
        
        
