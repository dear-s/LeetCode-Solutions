class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        
        
        # KAHN ALGORITHM (topological sort + BFS)
        # understood from - https://www.youtube.com/watch?v=u4v_kvOfumU&t=390s
        
        # graph array [go to]
        # dependency array [coming from]
        # queue - push only with 0 dependency
        
        
        # graph array
        graph = [[] for x in range(numCourses)]
        print("starter graph: ", graph)
        
        for p in prerequisites:
            graph[p[1]].append(p[0])
        
        print("graph updated: ", graph)
        
        
        # dependency array
        dependency = [0 for x in range(numCourses)]
        print("starter dependency: ", dependency)
        
        for p in prerequisites:
            dependency[p[0]] += 1
            
        print("dependency updated: ", dependency)
        
        
        # counter - for cleared nodes from queue - should be numCourses at the end [for True]
        cleared = 0
        # introduce queue - add with 0 dependency
        queue = []
        
        if 0 in dependency:
            index_with_0 = dependency.index(0)
            queue.append(index_with_0)
            dependency[index_with_0] = ""
        else:
            return []
        
        
        print("start queue: ", queue)
        
        visited = [] # to not add again from dependency
        while queue:
            a = queue.pop(0)
            cleared += 1
            visited.append(a)
            
            arr_num_to_decrement_from_dependency = graph[a]
            for arr_num in arr_num_to_decrement_from_dependency:
                dependency[arr_num] -= 1
                
            for d in range(len(dependency)):
                if dependency[d] == 0 and d not in visited:
                    queue.append(d)
                    dependency[d] = ""
                    
            print("updated queue: ", queue)
            print("updated cleared: ", cleared)
            
        if cleared == numCourses:
            return visited
        
        return []
        
