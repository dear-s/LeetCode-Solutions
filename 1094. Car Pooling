class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        
        # capacity = 4 = _ _ _ _
        # 1s trip = 2,1,5 = ! ! _ _
        # sort with start_location
        # put all the locations marked on a separate array
        
        # sort with start_location
        trips.sort(key = lambda x:x[1])
        
        # print("trips after sorting: ", trips)
        
        all_locations = []
        startloc_passengers = {}
        endloc_passengers = {}
        
        for trip in trips:
            if trip[1] not in all_locations: all_locations.append(trip[1])
            if trip[2] not in all_locations: all_locations.append(trip[2])
                
            if trip[1] not in startloc_passengers:
                startloc_passengers[trip[1]] = trip[0]
            else:
                startloc_passengers[trip[1]] += trip[0]
            
            if trip[2] not in endloc_passengers:
                endloc_passengers[trip[2]] = trip[0]
            else:
                endloc_passengers[trip[2]] += trip[0]
                
        all_locations.sort() # for easy start logic
        
        # print("all_locations: ", all_locations)
        # print("startloc_passengers: ", startloc_passengers)
        # print("endloc_passengers: ", endloc_passengers)
        
        # start the logic
        # make a variable and start with 0 - it should not exceed capacity
        # if exceeds -- return False
        
        seats = capacity # keep on decrementing as passengers hop on
        
        # let's start the journey
        for locs in all_locations:
            # check start_location and end_location
            # check for seats value - should always be >= 0
            if locs in endloc_passengers:
                # drops off
                seats += endloc_passengers[locs]
                
            if locs in startloc_passengers:
                # hop in
                seats -= startloc_passengers[locs]
                if seats < 0: return False
            
        return True
        
        
