
class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.q = []
        self.length = k
        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """

        if len(self.q) == self.length:
            # cannot add more
            return False
        
        self.q.append(value)
        return True
            
        

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        # return the last element
        if len(self.q) == 0:
            return False
        
        last_element = self.q.pop(0)
        return True
        

    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if len(self.q) == 0:
            return -1
        
        first = self.q[0]
        return first
        

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if len(self.q) == 0:
            return -1
        
        last = self.q[-1]
        return last
        

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        if len(self.q) == 0:
            return True
        
        return False
        

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        # print("in full.. self.queue: ", queue)
        if len(self.q) == self.length:
            return True
        
        return False
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()

