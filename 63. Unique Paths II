
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        dp = [["" for x in range(len(obstacleGrid[0]))] for y in range(len(obstacleGrid))]
        
        for i in range(len(obstacleGrid)):
            for j in range(len(obstacleGrid[0])):
                if obstacleGrid[0][0] == 1: return 0
                dp[0][0] = 1
                
                if obstacleGrid[i][j] != 0:
                    dp[i][j] = 0
                    continue
                
                if obstacleGrid[0][j] == 0:
                    # first row
                    dp[0][j] = dp[0][j-1]
                if obstacleGrid[i][0] == 0:
                    # first column
                    dp[i][0] = dp[i-1][0]

                if i>0 and j>0 and obstacleGrid[i][j] == 0:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
        
        
        return dp[len(dp)-1][len(dp[0])-1] # last element
        
        


