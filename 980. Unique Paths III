
        
class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        
        self.all_zeroes = 0 # keep a check if we have travelled all zeroes in the path
        self.paths = []

        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 0:
                    self.all_zeroes += 1

                if grid[i][j] == 1:
                    get_start_index = [i,j]

        # print("self.all_zeroes: ", self.all_zeroes)

        start_i = get_start_index[0]
        start_j = get_start_index[1]

        temp = [[start_i, start_j]]
        saved_value = grid[start_i][start_j]

        grid[start_i][start_j] = ""
        # up
        self.rec(grid, start_i-1, start_j, temp + [[start_i-1, start_j]], 0)
        # down
        self.rec(grid, start_i+1, start_j, temp + [[start_i+1, start_j]], 0)
        # left
        self.rec(grid, start_i, start_j-1, temp + [[start_i, start_j-1]], 0)
        # right
        self.rec(grid, start_i, start_j+1, temp + [[start_i, start_j+1]], 0)

        grid[start_i][start_j] = saved_value

        # print("self.paths: ", self.paths)
        return len(self.paths)


    def rec(self, grid, i, j, temp, count_zero):
        # temp will store the indexes -- and then compare with the path list

        if i < 0 or j < 0 or i > len(grid)-1 or j > len(grid[0])-1 or grid[i][j] == -1 or grid[i][j] == "":
            return

        if grid[i][j] == 2:
            if temp not in self.paths and count_zero == self.all_zeroes:
                self.paths.append(temp)
            return


        saved_value = grid[i][j]
        grid[i][j] = ""

        # up
        self.rec(grid, i-1, j, temp + [[i-1, j]], count_zero +1)
        # down
        self.rec(grid, i+1, j, temp + [[i+1, j]], count_zero +1)
        # left
        self.rec(grid, i, j-1, temp + [[i, j-1]], count_zero +1)
        # right
        self.rec(grid, i, j+1, temp + [[i, j+1]], count_zero +1)

        grid[i][j] = saved_value
        
